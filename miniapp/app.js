// Metro: DevOps Survival Mini App
class MetroGame {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.gameState = null;
        this.currentScene = 'start';
        this.botIntegration = null;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        this.tg.ready();
        this.tg.expand();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        this.loadGameState();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
        this.botIntegration = new BotIntegration(this);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.showScreen('main-menu');
        this.updateResources();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        document.querySelectorAll('.menu-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                this.handleMenuAction(action);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–Ω–∞–∑–∞–¥"
        document.querySelectorAll('.back-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const backTo = e.currentTarget.dataset.back;
                this.showScreen(backTo);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ö–∞–±–µ
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                this.handleHubAction(action);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        document.getElementById('send-chat')?.addEventListener('click', () => {
            this.sendLocalChat();
        });

        document.getElementById('set-freq')?.addEventListener('click', () => {
            this.setRadioFrequency();
        });

        document.getElementById('drop-note')?.addEventListener('click', () => {
            this.dropNote();
        });

        document.getElementById('scan-notes')?.addEventListener('click', () => {
            this.scanNotes();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('setting-images')?.addEventListener('change', (e) => {
            this.updateSetting('images_enabled', e.target.checked);
        });

        document.getElementById('setting-compact')?.addEventListener('change', (e) => {
            this.updateSetting('ui_compact', e.target.checked);
        });

        document.getElementById('setting-notifications')?.addEventListener('change', (e) => {
            this.updateSetting('notifications_enabled', e.target.checked);
        });

        document.getElementById('setting-shop')?.addEventListener('change', (e) => {
            this.updateSetting('show_shop', e.target.checked);
        });
    }

    loadGameState() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
        const savedState = localStorage.getItem('metro_game_state');
        if (savedState) {
            this.gameState = JSON.parse(savedState);
        } else {
            this.gameState = this.createNewGameState();
        }
    }

    createNewGameState() {
        return {
            scene: "start",
            water: 3,
            filters: 1,
            ammo_light: 30,
            ammo_heavy: 0,
            seeds: 0,
            components: 0,
            inventory_load: 0,
            inventory_max: 10,
            ai_influence: 0.0,
            quest_radio_fixed: false,
            keycard_semenov: false,
            mission1_done: false,
            has_water_sensor: false,
            flags: {},
            reputation: {},
            awaiting_crc_lines: false,
            awaiting_any_input: false,
            username: this.tg.initDataUnsafe?.user?.username || null,
            role_id: null,
            role_name: null,
            nickname: null,
            awaiting_nickname: false,
            lore_logs: [],
            images_enabled: true,
            ui_compact: false,
            notifications_enabled: true,
            locale: "ru",
            raids_completed: 0,
            faction: null,
            show_shop: false,
            last_chat_at: 0,
            daily_date: "",
            daily_quests: [],
            completed_quests: [],
            active_quests: []
        };
    }

    saveGameState() {
        localStorage.setItem('metro_game_state', JSON.stringify(this.gameState));
    }

    showScreen(screenId) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const screen = document.getElementById(screenId);
        if (screen) {
            screen.classList.add('active');
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        this.updateResources();
    }

    updateResources() {
        // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        document.getElementById('water').textContent = `üíß ${this.gameState.water}`;
        document.getElementById('filters').textContent = `üõ° ${this.gameState.filters}`;
        document.getElementById('ammo').textContent = `üî´ ${this.gameState.ammo_light}`;
        document.getElementById('ai').textContent = `ü§ñ ${this.gameState.ai_influence.toFixed(1)}`;
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const raidsCompleted = document.getElementById('raids-completed');
        const faction = document.getElementById('faction');
        
        if (raidsCompleted) {
            raidsCompleted.textContent = this.gameState.raids_completed;
        }
        
        if (faction) {
            faction.textContent = this.gameState.faction || '–ù–µ—Ç';
        }
    }

    handleMenuAction(action) {
        switch (action) {
            case 'hub':
                this.showScreen('hub');
                this.loadHubContent();
                break;
            case 'quests':
                this.showScreen('quests');
                this.loadQuests();
                break;
            case 'journal':
                this.showScreen('journal');
                this.loadJournal();
                break;
            case 'reputation':
                this.showReputation();
                break;
            case 'multiplayer':
                this.showScreen('multiplayer');
                this.loadMultiplayer();
                break;
            case 'settings':
                this.showScreen('settings');
                this.loadSettings();
                break;
            case 'help':
                this.showScreen('help');
                break;
            case 'reset':
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                    this.resetGame();
                }
                break;
        }
    }

    handleHubAction(action) {
        switch (action) {
            case 'boris':
                this.startDialogue('boris');
                break;
            case 'chrome':
                this.startDialogue('chrome');
                break;
        }
    }

    loadHubContent() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ö–∞–±–∞
        const missionsList = document.getElementById('missions-list');
        if (missionsList) {
            missionsList.innerHTML = `
                <div class="mission-item">
                    <h4>ü™ñ –ú–∏—Å—Å–∏—è 1: –¢–µ–º–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞</h4>
                    <p>–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏</p>
                    <button class="action-btn" onclick="game.startMission('dark_staircase')">–ù–∞—á–∞—Ç—å</button>
                </div>
                <div class="mission-item">
                    <h4>üîß –ú–∏—Å—Å–∏—è 2: –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ª</h4>
                    <p>–ü—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –∑–æ–Ω—É</p>
                    <button class="action-btn" onclick="game.startMission('server_hall')">–ù–∞—á–∞—Ç—å</button>
                </div>
            `;
        }
    }

    loadQuests() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        const questsList = document.getElementById('quests-list');
        if (questsList) {
            const quests = this.getDailyQuests();
            questsList.innerHTML = quests.map(quest => `
                <div class="quest-item ${quest.completed ? 'completed' : ''}">
                    <h4>${quest.title}</h4>
                    <p>${quest.description}</p>
                    <div class="requirements">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${quest.requirements}</div>
                    <div class="rewards">–ù–∞–≥—Ä–∞–¥—ã: ${quest.rewards}</div>
                    ${!quest.completed ? `<button onclick="game.completeQuest('${quest.id}')">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>` : ''}
                </div>
            `).join('');
        }
    }

    loadJournal() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞/–ª–æ—Ä–∞
        const journalEntries = document.getElementById('journal-entries');
        if (journalEntries) {
            if (this.gameState.lore_logs.length === 0) {
                journalEntries.innerHTML = '<p>–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º–∏—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏.</p>';
            } else {
                journalEntries.innerHTML = this.gameState.lore_logs.map(entry => `
                    <div class="journal-entry">
                        <div class="timestamp">${new Date().toLocaleString()}</div>
                        <div class="content">${entry}</div>
                    </div>
                `).join('');
            }
        }
    }

    loadMultiplayer() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        const localChat = document.getElementById('local-chat');
        if (localChat) {
            localChat.innerHTML = '<p>–õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Mini App –≤–µ—Ä—Å–∏–∏.</p>';
        }
    }

    loadSettings() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('setting-images').checked = this.gameState.images_enabled;
        document.getElementById('setting-compact').checked = this.gameState.ui_compact;
        document.getElementById('setting-notifications').checked = this.gameState.notifications_enabled;
        document.getElementById('setting-shop').checked = this.gameState.show_shop;
    }

    getDailyQuests() {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        return [
            {
                id: 'quest1',
                title: '–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤',
                description: '–°–æ–±–µ—Ä–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –≤–æ–¥—ã',
                requirements: '–í–æ–¥–∞: 5',
                rewards: '–§–∏–ª—å—Ç—Ä—ã: +1',
                completed: this.gameState.water >= 5
            },
            {
                id: 'quest2',
                title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 3 –ª–æ–∫–∞—Ü–∏–∏',
                requirements: '–õ–æ–∫–∞—Ü–∏–∏: 3',
                rewards: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: +2',
                completed: false
            }
        ];
    }

    startDialogue(npc) {
        // –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å NPC
        if (this.botIntegration) {
            this.botIntegration.sendDialogueChoice(npc);
        } else {
            this.tg.showAlert(`–î–∏–∞–ª–æ–≥ —Å ${npc} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Mini App –≤–µ—Ä—Å–∏–∏.`);
        }
    }

    startMission(missionId) {
        // –ù–∞—á–∞–ª–æ –º–∏—Å—Å–∏–∏
        if (this.botIntegration) {
            this.botIntegration.sendMissionStart(missionId);
        } else {
            this.tg.showAlert(`–ú–∏—Å—Å–∏—è ${missionId} –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Mini App –≤–µ—Ä—Å–∏–∏.`);
        }
    }

    completeQuest(questId) {
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
        if (this.botIntegration) {
            this.botIntegration.sendQuestComplete(questId);
        } else {
            this.tg.showAlert(`–ö–≤–µ—Å—Ç ${questId} –≤—ã–ø–æ–ª–Ω–µ–Ω!`);
            this.loadQuests(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        }
    }

    sendLocalChat() {
        const input = document.getElementById('chat-input');
        const message = input.value.trim();
        if (message) {
            this.tg.showAlert(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
            input.value = '';
        }
    }

    setRadioFrequency() {
        const freq = document.getElementById('radio-freq').value;
        if (freq) {
            this.tg.showAlert(`–ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${freq}`);
        }
    }

    dropNote() {
        const text = document.getElementById('drop-text').value.trim();
        if (text) {
            this.tg.showAlert(`–ó–∞–º–µ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞: ${text}`);
            document.getElementById('drop-text').value = '';
        }
    }

    scanNotes() {
        this.tg.showAlert('–ó–∞–º–µ—Ç–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ Mini App –≤–µ—Ä—Å–∏–∏.');
    }

    updateSetting(setting, value) {
        this.gameState[setting] = value;
        this.saveGameState();
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–æ—Ç
        if (this.botIntegration) {
            this.botIntegration.sendSettingChange(setting, value);
        }
    }

    showReputation() {
        const rep = this.gameState.reputation;
        const repText = Object.keys(rep).length > 0 
            ? Object.entries(rep).map(([faction, value]) => `${faction}: ${value}`).join('\n')
            : '–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–∞';
        
        this.tg.showAlert(`–†–µ–ø—É—Ç–∞—Ü–∏—è:\n${repText}`);
    }

    resetGame() {
        this.gameState = this.createNewGameState();
        this.saveGameState();
        this.showScreen('main-menu');
        this.updateResources();
        this.tg.showAlert('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
    sendToBot(action, data = {}) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç —á–µ—Ä–µ–∑ Telegram Web App
        this.tg.sendData(JSON.stringify({
            action: action,
            data: data,
            userId: this.tg.initDataUnsafe?.user?.id
        }));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new MetroGame();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
window.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'game_update') {
        game.gameState = event.data.state;
        game.saveGameState();
        game.updateResources();
    }
});
